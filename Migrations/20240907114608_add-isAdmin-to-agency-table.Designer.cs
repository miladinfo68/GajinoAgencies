// <auto-generated />
using System;
using GajinoAgencies.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GajinoAgencies.Migrations
{
    [DbContext(typeof(AgencyDbContext))]
    [Migration("20240907114608_add-isAdmin-to-agency-table")]
    partial class addisAdmintoagencytable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GajinoAgencies.Models.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Institute")
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("GajinoAgencies.Models.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CityCode")
                        .IsRequired()
                        .HasColumnType("char(3)");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Province")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "تهران",
                            CityCode = "THR",
                            CreationDate = new DateTime(2024, 9, 7, 15, 16, 7, 724, DateTimeKind.Local).AddTicks(3660),
                            IsActive = true,
                            Province = "تهران"
                        },
                        new
                        {
                            Id = 2,
                            City = "همدان",
                            CityCode = "HMD",
                            CreationDate = new DateTime(2024, 9, 7, 15, 16, 7, 724, DateTimeKind.Local).AddTicks(3678),
                            IsActive = true,
                            Province = "همدان"
                        },
                        new
                        {
                            Id = 3,
                            City = "شیراز",
                            CityCode = "SHZ",
                            CreationDate = new DateTime(2024, 9, 7, 15, 16, 7, 724, DateTimeKind.Local).AddTicks(3680),
                            IsActive = true,
                            Province = "شیراز"
                        },
                        new
                        {
                            Id = 4,
                            City = "اصفهان",
                            CityCode = "ESF",
                            CreationDate = new DateTime(2024, 9, 7, 15, 16, 7, 724, DateTimeKind.Local).AddTicks(3682),
                            IsActive = true,
                            Province = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            City = "یزد",
                            CityCode = "YZD",
                            CreationDate = new DateTime(2024, 9, 7, 15, 16, 7, 724, DateTimeKind.Local).AddTicks(3683),
                            IsActive = true,
                            Province = "یزد"
                        },
                        new
                        {
                            Id = 6,
                            City = "لرستان",
                            CityCode = "LOR",
                            CreationDate = new DateTime(2024, 9, 7, 15, 16, 7, 724, DateTimeKind.Local).AddTicks(3688),
                            IsActive = true,
                            Province = "لرستان"
                        },
                        new
                        {
                            Id = 7,
                            City = "کرج",
                            CityCode = "KRJ",
                            CreationDate = new DateTime(2024, 9, 7, 15, 16, 7, 724, DateTimeKind.Local).AddTicks(3690),
                            IsActive = true,
                            Province = "کرج"
                        });
                });

            modelBuilder.Entity("GajinoAgencies.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TraceNo")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("GajinoAgencies.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<byte>("Discount")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PackageDetailIds")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("UnUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AgencyId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("GajinoAgencies.Models.Agency", b =>
                {
                    b.HasOne("GajinoAgencies.Models.Location", "Location")
                        .WithOne("Agency")
                        .HasForeignKey("GajinoAgencies.Models.Agency", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("GajinoAgencies.Models.Payment", b =>
                {
                    b.HasOne("GajinoAgencies.Models.Agency", "Agency")
                        .WithMany("Payments")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("GajinoAgencies.Models.Voucher", b =>
                {
                    b.HasOne("GajinoAgencies.Models.Agency", "Agency")
                        .WithMany("Vouchers")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("GajinoAgencies.Models.Agency", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("GajinoAgencies.Models.Location", b =>
                {
                    b.Navigation("Agency")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
